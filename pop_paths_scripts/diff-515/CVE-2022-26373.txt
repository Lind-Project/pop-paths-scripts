<!DOCTYPE html>
<html lang='en'>
<head>
<title>kernel/git/torvalds/linux.git - Linux kernel source tree</title>
<meta name='generator' content='cgit '/>
<meta name='robots' content='noindex, nofollow'/>
<link rel='stylesheet' type='text/css' href='/cgit-data/cgit.css'/>
<link rel='shortcut icon' href='/favicon.ico'/>
<link rel='alternate' title='Atom feed' href='http://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/atom/?h=master' type='application/atom+xml'/>
<link rel='vcs-git' href='git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git' title='kernel/git/torvalds/linux.git Git repository'/>
<link rel='vcs-git' href='https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git' title='kernel/git/torvalds/linux.git Git repository'/>
<link rel='vcs-git' href='https://kernel.googlesource.com/pub/scm/linux/kernel/git/torvalds/linux.git' title='kernel/git/torvalds/linux.git Git repository'/>
</head>
<body>
<div id='cgit'><table id='header'>
<tr>
<td class='logo' rowspan='2'><a href='/'><img src='/cgit-data/cgit.png' alt='cgit logo'/></a></td>
<td class='main'><a href='/'>index</a> : <a title='kernel/git/torvalds/linux.git' href='/pub/scm/linux/kernel/git/torvalds/linux.git/'>kernel/git/torvalds/linux.git</a></td><td class='form'><form method='get'>
<input type='hidden' name='id' value='7fcd99e889c0634f8275ae7a6b06aec4a22c8715'/><select name='h' onchange='this.form.submit();'>
<option value='master' selected='selected'>master</option>
</select> <input type='submit' value='switch'/></form></td></tr>
<tr><td class='sub'>Linux kernel source tree</td><td class='sub right'>Linus Torvalds</td></tr></table>
<table class='tabs'><tr><td>
<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/about/'>about</a><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/'>summary</a><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/refs/?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>refs</a><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/log/'>log</a><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>tree</a><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>commit</a><a class='active' href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>diff</a><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/stats/'>stats</a></td><td class='form'><form class='right' method='get' action='/pub/scm/linux/kernel/git/torvalds/linux.git/log/'>
<input type='hidden' name='id' value='7fcd99e889c0634f8275ae7a6b06aec4a22c8715'/><select name='qt'>
<option value='grep'>log msg</option>
<option value='author'>author</option>
<option value='committer'>committer</option>
<option value='range'>range</option>
</select>
<input class='txt' type='search' size='10' name='q' value=''/>
<input type='submit' value='search'/>
</form>
</td></tr></table>
<div class='content'><div class='cgit-panel'><b>diff options</b><form method='get'><input type='hidden' name='id' value='7fcd99e889c0634f8275ae7a6b06aec4a22c8715'/><table><tr><td colspan='2'/></tr><tr><td class='label'>context:</td><td class='ctrl'><select name='context' onchange='this.form.submit();'><option value='1'>1</option><option value='2'>2</option><option value='3' selected='selected'>3</option><option value='4'>4</option><option value='5'>5</option><option value='6'>6</option><option value='7'>7</option><option value='8'>8</option><option value='9'>9</option><option value='10'>10</option><option value='15'>15</option><option value='20'>20</option><option value='25'>25</option><option value='30'>30</option><option value='35'>35</option><option value='40'>40</option></select></td></tr><tr><td class='label'>space:</td><td class='ctrl'><select name='ignorews' onchange='this.form.submit();'><option value='0' selected='selected'>include</option><option value='1'>ignore</option></select></td></tr><tr><td class='label'>mode:</td><td class='ctrl'><select name='dt' onchange='this.form.submit();'><option value='0' selected='selected'>unified</option><option value='1'>ssdiff</option><option value='2'>stat only</option></select></td></tr><tr><td/><td class='ctrl'><noscript><input type='submit' value='reload'/></noscript></td></tr></table></form></div><div class='diffstat-header'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>Diffstat</a></div><table summary='diffstat' class='diffstat'><tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/Documentation/admin-guide/hw-vuln/spectre.rst?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>Documentation/admin-guide/hw-vuln/spectre.rst</a></td><td class='right'>8</td><td class='graph'><table summary='file diffstat' width='86%'><tr><td class='add' style='width: 9.3%;'/><td class='rem' style='width: 0.0%;'/><td class='none' style='width: 90.7%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/arch/x86/include/asm/cpufeatures.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/include/asm/cpufeatures.h</a></td><td class='right'>2</td><td class='graph'><table summary='file diffstat' width='86%'><tr><td class='add' style='width: 2.3%;'/><td class='rem' style='width: 0.0%;'/><td class='none' style='width: 97.7%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/arch/x86/include/asm/msr-index.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/include/asm/msr-index.h</a></td><td class='right'>4</td><td class='graph'><table summary='file diffstat' width='86%'><tr><td class='add' style='width: 4.7%;'/><td class='rem' style='width: 0.0%;'/><td class='none' style='width: 95.3%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/arch/x86/include/asm/nospec-branch.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/include/asm/nospec-branch.h</a></td><td class='right'>17</td><td class='graph'><table summary='file diffstat' width='86%'><tr><td class='add' style='width: 18.6%;'/><td class='rem' style='width: 1.2%;'/><td class='none' style='width: 80.2%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/arch/x86/kernel/cpu/bugs.c?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/kernel/cpu/bugs.c</a></td><td class='right'>86</td><td class='graph'><table summary='file diffstat' width='86%'><tr><td class='add' style='width: 73.3%;'/><td class='rem' style='width: 26.7%;'/><td class='none' style='width: 0.0%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/arch/x86/kernel/cpu/common.c?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/kernel/cpu/common.c</a></td><td class='right'>12</td><td class='graph'><table summary='file diffstat' width='86%'><tr><td class='add' style='width: 11.6%;'/><td class='rem' style='width: 2.3%;'/><td class='none' style='width: 86.0%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/arch/x86/kvm/vmx/vmenter.S?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/kvm/vmx/vmenter.S</a></td><td class='right'>8</td><td class='graph'><table summary='file diffstat' width='86%'><tr><td class='add' style='width: 5.8%;'/><td class='rem' style='width: 3.5%;'/><td class='none' style='width: 90.7%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/tools/arch/x86/include/asm/cpufeatures.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>tools/arch/x86/include/asm/cpufeatures.h</a></td><td class='right'>1</td><td class='graph'><table summary='file diffstat' width='86%'><tr><td class='add' style='width: 1.2%;'/><td class='rem' style='width: 0.0%;'/><td class='none' style='width: 98.8%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/pub/scm/linux/kernel/git/torvalds/linux.git/diff/tools/arch/x86/include/asm/msr-index.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>tools/arch/x86/include/asm/msr-index.h</a></td><td class='right'>4</td><td class='graph'><table summary='file diffstat' width='86%'><tr><td class='add' style='width: 4.7%;'/><td class='rem' style='width: 0.0%;'/><td class='none' style='width: 95.3%;'/></tr></table></td></tr>
</table><div class='diffstat-summary'>9 files changed, 113 insertions, 29 deletions</div><table summary='diff' class='diff'><tr><td><div class='head'>diff --git a/Documentation/admin-guide/hw-vuln/spectre.rst b/Documentation/admin-guide/hw-vuln/spectre.rst<br/>index 6bd97cd50d625..7e061ed449aaa 100644<br/>--- a/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/admin-guide/hw-vuln/spectre.rst?id=c81d1bb58c88ab831e02539a26ad47860e8d6f0c'>Documentation/admin-guide/hw-vuln/spectre.rst</a><br/>+++ b/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/admin-guide/hw-vuln/spectre.rst?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>Documentation/admin-guide/hw-vuln/spectre.rst</a></div><div class='hunk'>@@ -422,6 +422,14 @@ The possible values in this file are:</div><div class='ctx'>   'RSB filling'   Protection of RSB on context switch enabled</div><div class='ctx'>   =============   ===========================================</div><div class='ctx'> </div><div class='add'>+  - EIBRS Post-barrier Return Stack Buffer (PBRSB) protection status:</div><div class='add'>+</div><div class='add'>+  ===========================  =======================================================</div><div class='add'>+  'PBRSB-eIBRS: SW sequence'   CPU is affected and protection of RSB on VMEXIT enabled</div><div class='add'>+  'PBRSB-eIBRS: Vulnerable'    CPU is vulnerable</div><div class='add'>+  'PBRSB-eIBRS: Not affected'  CPU is not affected by PBRSB</div><div class='add'>+  ===========================  =======================================================</div><div class='add'>+</div><div class='ctx'> Full mitigation might require a microcode update from the CPU</div><div class='ctx'> vendor. When the necessary microcode is not available, the kernel will</div><div class='ctx'> report vulnerability.</div><div class='head'>diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h<br/>index d370718e222ba..be744fa100048 100644<br/>--- a/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/include/asm/cpufeatures.h?id=c81d1bb58c88ab831e02539a26ad47860e8d6f0c'>arch/x86/include/asm/cpufeatures.h</a><br/>+++ b/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/include/asm/cpufeatures.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/include/asm/cpufeatures.h</a></div><div class='hunk'>@@ -301,6 +301,7 @@</div><div class='ctx'> #define X86_FEATURE_RETHUNK		(11*32+14) /* "" Use REturn THUNK */</div><div class='ctx'> #define X86_FEATURE_UNRET		(11*32+15) /* "" AMD BTB untrain return */</div><div class='ctx'> #define X86_FEATURE_USE_IBPB_FW		(11*32+16) /* "" Use IBPB during runtime firmware calls */</div><div class='add'>+#define X86_FEATURE_RSB_VMEXIT_LITE	(11*32+17) /* "" Fill RSB on VM exit when EIBRS is enabled */</div><div class='ctx'> </div><div class='ctx'> /* Intel-defined CPU features, CPUID level 0x00000007:1 (EAX), word 12 */</div><div class='ctx'> #define X86_FEATURE_AVX_VNNI		(12*32+ 4) /* AVX VNNI instructions */</div><div class='hunk'>@@ -446,5 +447,6 @@</div><div class='ctx'> #define X86_BUG_SRBDS			X86_BUG(24) /* CPU may leak RNG bits if not mitigated */</div><div class='ctx'> #define X86_BUG_MMIO_STALE_DATA		X86_BUG(25) /* CPU is affected by Processor MMIO Stale Data vulnerabilities */</div><div class='ctx'> #define X86_BUG_RETBLEED		X86_BUG(26) /* CPU is affected by RETBleed */</div><div class='add'>+#define X86_BUG_EIBRS_PBRSB		X86_BUG(27) /* EIBRS is vulnerable to Post Barrier RSB Predictions */</div><div class='ctx'> </div><div class='ctx'> #endif /* _ASM_X86_CPUFEATURES_H */</div><div class='head'>diff --git a/arch/x86/include/asm/msr-index.h b/arch/x86/include/asm/msr-index.h<br/>index ec2967e7249f5..8f38265bc81dc 100644<br/>--- a/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/include/asm/msr-index.h?id=c81d1bb58c88ab831e02539a26ad47860e8d6f0c'>arch/x86/include/asm/msr-index.h</a><br/>+++ b/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/include/asm/msr-index.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/include/asm/msr-index.h</a></div><div class='hunk'>@@ -148,6 +148,10 @@</div><div class='ctx'> 						 * are restricted to targets in</div><div class='ctx'> 						 * kernel.</div><div class='ctx'> 						 */</div><div class='add'>+#define ARCH_CAP_PBRSB_NO		BIT(24)	/*</div><div class='add'>+						 * Not susceptible to Post-Barrier</div><div class='add'>+						 * Return Stack Buffer Predictions.</div><div class='add'>+						 */</div><div class='ctx'> </div><div class='ctx'> #define MSR_IA32_FLUSH_CMD		0x0000010b</div><div class='ctx'> #define L1D_FLUSH			BIT(0)	/*</div><div class='head'>diff --git a/arch/x86/include/asm/nospec-branch.h b/arch/x86/include/asm/nospec-branch.h<br/>index 9a79b96e55214..96597246f7931 100644<br/>--- a/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/include/asm/nospec-branch.h?id=c81d1bb58c88ab831e02539a26ad47860e8d6f0c'>arch/x86/include/asm/nospec-branch.h</a><br/>+++ b/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/include/asm/nospec-branch.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/include/asm/nospec-branch.h</a></div><div class='hunk'>@@ -118,13 +118,28 @@</div><div class='ctx'> #endif</div><div class='ctx'> .endm</div><div class='ctx'> </div><div class='add'>+.macro ISSUE_UNBALANCED_RET_GUARD</div><div class='add'>+	ANNOTATE_INTRA_FUNCTION_CALL</div><div class='add'>+	call .Lunbalanced_ret_guard_\@</div><div class='add'>+	int3</div><div class='add'>+.Lunbalanced_ret_guard_\@:</div><div class='add'>+	add $(BITS_PER_LONG/8), %_ASM_SP</div><div class='add'>+	lfence</div><div class='add'>+.endm</div><div class='add'>+</div><div class='ctx'>  /*</div><div class='ctx'>   * A simpler FILL_RETURN_BUFFER macro. Don't make people use the CPP</div><div class='ctx'>   * monstrosity above, manually.</div><div class='ctx'>   */</div><div class='del'>-.macro FILL_RETURN_BUFFER reg:req nr:req ftr:req</div><div class='add'>+.macro FILL_RETURN_BUFFER reg:req nr:req ftr:req ftr2</div><div class='add'>+.ifb \ftr2</div><div class='ctx'> 	ALTERNATIVE "jmp .Lskip_rsb_\@", "", \ftr</div><div class='add'>+.else</div><div class='add'>+	ALTERNATIVE_2 "jmp .Lskip_rsb_\@", "", \ftr, "jmp .Lunbalanced_\@", \ftr2</div><div class='add'>+.endif</div><div class='ctx'> 	__FILL_RETURN_BUFFER(\reg,\nr,%_ASM_SP)</div><div class='add'>+.Lunbalanced_\@:</div><div class='add'>+	ISSUE_UNBALANCED_RET_GUARD</div><div class='ctx'> .Lskip_rsb_\@:</div><div class='ctx'> .endm</div><div class='ctx'> </div><div class='head'>diff --git a/arch/x86/kernel/cpu/bugs.c b/arch/x86/kernel/cpu/bugs.c<br/>index a37814c8547e4..837e617f3b76d 100644<br/>--- a/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/cpu/bugs.c?id=c81d1bb58c88ab831e02539a26ad47860e8d6f0c'>arch/x86/kernel/cpu/bugs.c</a><br/>+++ b/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/cpu/bugs.c?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/kernel/cpu/bugs.c</a></div><div class='hunk'>@@ -1328,6 +1328,53 @@ static void __init spec_ctrl_disable_kernel_rrsba(void)</div><div class='ctx'> 	}</div><div class='ctx'> }</div><div class='ctx'> </div><div class='add'>+static void __init spectre_v2_determine_rsb_fill_type_at_vmexit(enum spectre_v2_mitigation mode)</div><div class='add'>+{</div><div class='add'>+	/*</div><div class='add'>+	 * Similar to context switches, there are two types of RSB attacks</div><div class='add'>+	 * after VM exit:</div><div class='add'>+	 *</div><div class='add'>+	 * 1) RSB underflow</div><div class='add'>+	 *</div><div class='add'>+	 * 2) Poisoned RSB entry</div><div class='add'>+	 *</div><div class='add'>+	 * When retpoline is enabled, both are mitigated by filling/clearing</div><div class='add'>+	 * the RSB.</div><div class='add'>+	 *</div><div class='add'>+	 * When IBRS is enabled, while #1 would be mitigated by the IBRS branch</div><div class='add'>+	 * prediction isolation protections, RSB still needs to be cleared</div><div class='add'>+	 * because of #2.  Note that SMEP provides no protection here, unlike</div><div class='add'>+	 * user-space-poisoned RSB entries.</div><div class='add'>+	 *</div><div class='add'>+	 * eIBRS should protect against RSB poisoning, but if the EIBRS_PBRSB</div><div class='add'>+	 * bug is present then a LITE version of RSB protection is required,</div><div class='add'>+	 * just a single call needs to retire before a RET is executed.</div><div class='add'>+	 */</div><div class='add'>+	switch (mode) {</div><div class='add'>+	case SPECTRE_V2_NONE:</div><div class='add'>+		return;</div><div class='add'>+</div><div class='add'>+	case SPECTRE_V2_EIBRS_LFENCE:</div><div class='add'>+	case SPECTRE_V2_EIBRS:</div><div class='add'>+		if (boot_cpu_has_bug(X86_BUG_EIBRS_PBRSB)) {</div><div class='add'>+			setup_force_cpu_cap(X86_FEATURE_RSB_VMEXIT_LITE);</div><div class='add'>+			pr_info("Spectre v2 / PBRSB-eIBRS: Retire a single CALL on VMEXIT\n");</div><div class='add'>+		}</div><div class='add'>+		return;</div><div class='add'>+</div><div class='add'>+	case SPECTRE_V2_EIBRS_RETPOLINE:</div><div class='add'>+	case SPECTRE_V2_RETPOLINE:</div><div class='add'>+	case SPECTRE_V2_LFENCE:</div><div class='add'>+	case SPECTRE_V2_IBRS:</div><div class='add'>+		setup_force_cpu_cap(X86_FEATURE_RSB_VMEXIT);</div><div class='add'>+		pr_info("Spectre v2 / SpectreRSB : Filling RSB on VMEXIT\n");</div><div class='add'>+		return;</div><div class='add'>+	}</div><div class='add'>+</div><div class='add'>+	pr_warn_once("Unknown Spectre v2 mode, disabling RSB mitigation at VM exit");</div><div class='add'>+	dump_stack();</div><div class='add'>+}</div><div class='add'>+</div><div class='ctx'> static void __init spectre_v2_select_mitigation(void)</div><div class='ctx'> {</div><div class='ctx'> 	enum spectre_v2_mitigation_cmd cmd = spectre_v2_parse_cmdline();</div><div class='hunk'>@@ -1478,28 +1525,7 @@ static void __init spectre_v2_select_mitigation(void)</div><div class='ctx'> 	setup_force_cpu_cap(X86_FEATURE_RSB_CTXSW);</div><div class='ctx'> 	pr_info("Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch\n");</div><div class='ctx'> </div><div class='del'>-	/*</div><div class='del'>-	 * Similar to context switches, there are two types of RSB attacks</div><div class='del'>-	 * after vmexit:</div><div class='del'>-	 *</div><div class='del'>-	 * 1) RSB underflow</div><div class='del'>-	 *</div><div class='del'>-	 * 2) Poisoned RSB entry</div><div class='del'>-	 *</div><div class='del'>-	 * When retpoline is enabled, both are mitigated by filling/clearing</div><div class='del'>-	 * the RSB.</div><div class='del'>-	 *</div><div class='del'>-	 * When IBRS is enabled, while #1 would be mitigated by the IBRS branch</div><div class='del'>-	 * prediction isolation protections, RSB still needs to be cleared</div><div class='del'>-	 * because of #2.  Note that SMEP provides no protection here, unlike</div><div class='del'>-	 * user-space-poisoned RSB entries.</div><div class='del'>-	 *</div><div class='del'>-	 * eIBRS, on the other hand, has RSB-poisoning protections, so it</div><div class='del'>-	 * doesn't need RSB clearing after vmexit.</div><div class='del'>-	 */</div><div class='del'>-	if (boot_cpu_has(X86_FEATURE_RETPOLINE) ||</div><div class='del'>-	    boot_cpu_has(X86_FEATURE_KERNEL_IBRS))</div><div class='del'>-		setup_force_cpu_cap(X86_FEATURE_RSB_VMEXIT);</div><div class='add'>+	spectre_v2_determine_rsb_fill_type_at_vmexit(mode);</div><div class='ctx'> </div><div class='ctx'> 	/*</div><div class='ctx'> 	 * Retpoline protects the kernel, but doesn't protect firmware.  IBRS</div><div class='hunk'>@@ -2285,6 +2311,19 @@ static char *ibpb_state(void)</div><div class='ctx'> 	return "";</div><div class='ctx'> }</div><div class='ctx'> </div><div class='add'>+static char *pbrsb_eibrs_state(void)</div><div class='add'>+{</div><div class='add'>+	if (boot_cpu_has_bug(X86_BUG_EIBRS_PBRSB)) {</div><div class='add'>+		if (boot_cpu_has(X86_FEATURE_RSB_VMEXIT_LITE) ||</div><div class='add'>+		    boot_cpu_has(X86_FEATURE_RSB_VMEXIT))</div><div class='add'>+			return ", PBRSB-eIBRS: SW sequence";</div><div class='add'>+		else</div><div class='add'>+			return ", PBRSB-eIBRS: Vulnerable";</div><div class='add'>+	} else {</div><div class='add'>+		return ", PBRSB-eIBRS: Not affected";</div><div class='add'>+	}</div><div class='add'>+}</div><div class='add'>+</div><div class='ctx'> static ssize_t spectre_v2_show_state(char *buf)</div><div class='ctx'> {</div><div class='ctx'> 	if (spectre_v2_enabled == SPECTRE_V2_LFENCE)</div><div class='hunk'>@@ -2297,12 +2336,13 @@ static ssize_t spectre_v2_show_state(char *buf)</div><div class='ctx'> 	    spectre_v2_enabled == SPECTRE_V2_EIBRS_LFENCE)</div><div class='ctx'> 		return sprintf(buf, "Vulnerable: eIBRS+LFENCE with unprivileged eBPF and SMT\n");</div><div class='ctx'> </div><div class='del'>-	return sprintf(buf, "%s%s%s%s%s%s\n",</div><div class='add'>+	return sprintf(buf, "%s%s%s%s%s%s%s\n",</div><div class='ctx'> 		       spectre_v2_strings[spectre_v2_enabled],</div><div class='ctx'> 		       ibpb_state(),</div><div class='ctx'> 		       boot_cpu_has(X86_FEATURE_USE_IBRS_FW) ? ", IBRS_FW" : "",</div><div class='ctx'> 		       stibp_state(),</div><div class='ctx'> 		       boot_cpu_has(X86_FEATURE_RSB_CTXSW) ? ", RSB filling" : "",</div><div class='add'>+		       pbrsb_eibrs_state(),</div><div class='ctx'> 		       spectre_v2_module_string());</div><div class='ctx'> }</div><div class='ctx'> </div><div class='head'>diff --git a/arch/x86/kernel/cpu/common.c b/arch/x86/kernel/cpu/common.c<br/>index 80cc41f797830..4a538ec413b8b 100644<br/>--- a/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/cpu/common.c?id=c81d1bb58c88ab831e02539a26ad47860e8d6f0c'>arch/x86/kernel/cpu/common.c</a><br/>+++ b/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kernel/cpu/common.c?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/kernel/cpu/common.c</a></div><div class='hunk'>@@ -1027,6 +1027,7 @@ static void identify_cpu_without_cpuid(struct cpuinfo_x86 *c)</div><div class='ctx'> #define NO_SWAPGS		BIT(6)</div><div class='ctx'> #define NO_ITLB_MULTIHIT	BIT(7)</div><div class='ctx'> #define NO_SPECTRE_V2		BIT(8)</div><div class='add'>+#define NO_EIBRS_PBRSB		BIT(9)</div><div class='ctx'> </div><div class='ctx'> #define VULNWL(vendor, family, model, whitelist)	\</div><div class='ctx'> 	X86_MATCH_VENDOR_FAM_MODEL(vendor, family, model, whitelist)</div><div class='hunk'>@@ -1067,7 +1068,7 @@ static const __initconst struct x86_cpu_id cpu_vuln_whitelist[] = {</div><div class='ctx'> </div><div class='ctx'> 	VULNWL_INTEL(ATOM_GOLDMONT,		NO_MDS | NO_L1TF | NO_SWAPGS | NO_ITLB_MULTIHIT),</div><div class='ctx'> 	VULNWL_INTEL(ATOM_GOLDMONT_D,		NO_MDS | NO_L1TF | NO_SWAPGS | NO_ITLB_MULTIHIT),</div><div class='del'>-	VULNWL_INTEL(ATOM_GOLDMONT_PLUS,	NO_MDS | NO_L1TF | NO_SWAPGS | NO_ITLB_MULTIHIT),</div><div class='add'>+	VULNWL_INTEL(ATOM_GOLDMONT_PLUS,	NO_MDS | NO_L1TF | NO_SWAPGS | NO_ITLB_MULTIHIT | NO_EIBRS_PBRSB),</div><div class='ctx'> </div><div class='ctx'> 	/*</div><div class='ctx'> 	 * Technically, swapgs isn't serializing on AMD (despite it previously</div><div class='hunk'>@@ -1077,7 +1078,9 @@ static const __initconst struct x86_cpu_id cpu_vuln_whitelist[] = {</div><div class='ctx'> 	 * good enough for our purposes.</div><div class='ctx'> 	 */</div><div class='ctx'> </div><div class='del'>-	VULNWL_INTEL(ATOM_TREMONT_D,		NO_ITLB_MULTIHIT),</div><div class='add'>+	VULNWL_INTEL(ATOM_TREMONT,		NO_EIBRS_PBRSB),</div><div class='add'>+	VULNWL_INTEL(ATOM_TREMONT_L,		NO_EIBRS_PBRSB),</div><div class='add'>+	VULNWL_INTEL(ATOM_TREMONT_D,		NO_ITLB_MULTIHIT | NO_EIBRS_PBRSB),</div><div class='ctx'> </div><div class='ctx'> 	/* AMD Family 0xf - 0x12 */</div><div class='ctx'> 	VULNWL_AMD(0x0f,	NO_MELTDOWN | NO_SSB | NO_L1TF | NO_MDS | NO_SWAPGS | NO_ITLB_MULTIHIT),</div><div class='hunk'>@@ -1255,6 +1258,11 @@ static void __init cpu_set_bug_bits(struct cpuinfo_x86 *c)</div><div class='ctx'> 			setup_force_cpu_bug(X86_BUG_RETBLEED);</div><div class='ctx'> 	}</div><div class='ctx'> </div><div class='add'>+	if (cpu_has(c, X86_FEATURE_IBRS_ENHANCED) &amp;&amp;</div><div class='add'>+	    !cpu_matches(cpu_vuln_whitelist, NO_EIBRS_PBRSB) &amp;&amp;</div><div class='add'>+	    !(ia32_cap &amp; ARCH_CAP_PBRSB_NO))</div><div class='add'>+		setup_force_cpu_bug(X86_BUG_EIBRS_PBRSB);</div><div class='add'>+</div><div class='ctx'> 	if (cpu_matches(cpu_vuln_whitelist, NO_MELTDOWN))</div><div class='ctx'> 		return;</div><div class='ctx'> </div><div class='head'>diff --git a/arch/x86/kvm/vmx/vmenter.S b/arch/x86/kvm/vmx/vmenter.S<br/>index 857fa0fc49faf..982138bebb70f 100644<br/>--- a/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kvm/vmx/vmenter.S?id=c81d1bb58c88ab831e02539a26ad47860e8d6f0c'>arch/x86/kvm/vmx/vmenter.S</a><br/>+++ b/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/kvm/vmx/vmenter.S?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>arch/x86/kvm/vmx/vmenter.S</a></div><div class='hunk'>@@ -197,11 +197,13 @@ SYM_INNER_LABEL(vmx_vmexit, SYM_L_GLOBAL)</div><div class='ctx'> 	 * entries and (in some cases) RSB underflow.</div><div class='ctx'> 	 *</div><div class='ctx'> 	 * eIBRS has its own protection against poisoned RSB, so it doesn't</div><div class='del'>-	 * need the RSB filling sequence.  But it does need to be enabled</div><div class='del'>-	 * before the first unbalanced RET.</div><div class='add'>+	 * need the RSB filling sequence.  But it does need to be enabled, and a</div><div class='add'>+	 * single call to retire, before the first unbalanced RET.</div><div class='ctx'>          */</div><div class='ctx'> </div><div class='del'>-	FILL_RETURN_BUFFER %_ASM_CX, RSB_CLEAR_LOOPS, X86_FEATURE_RSB_VMEXIT</div><div class='add'>+	FILL_RETURN_BUFFER %_ASM_CX, RSB_CLEAR_LOOPS, X86_FEATURE_RSB_VMEXIT,\</div><div class='add'>+			   X86_FEATURE_RSB_VMEXIT_LITE</div><div class='add'>+</div><div class='ctx'> </div><div class='ctx'> 	pop %_ASM_ARG2	/* @flags */</div><div class='ctx'> 	pop %_ASM_ARG1	/* @vmx */</div><div class='head'>diff --git a/tools/arch/x86/include/asm/cpufeatures.h b/tools/arch/x86/include/asm/cpufeatures.h<br/>index 3781a7f489ef3..bcaedfe60572f 100644<br/>--- a/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/arch/x86/include/asm/cpufeatures.h?id=c81d1bb58c88ab831e02539a26ad47860e8d6f0c'>tools/arch/x86/include/asm/cpufeatures.h</a><br/>+++ b/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/arch/x86/include/asm/cpufeatures.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>tools/arch/x86/include/asm/cpufeatures.h</a></div><div class='hunk'>@@ -300,6 +300,7 @@</div><div class='ctx'> #define X86_FEATURE_RETPOLINE_LFENCE	(11*32+13) /* "" Use LFENCE for Spectre variant 2 */</div><div class='ctx'> #define X86_FEATURE_RETHUNK		(11*32+14) /* "" Use REturn THUNK */</div><div class='ctx'> #define X86_FEATURE_UNRET		(11*32+15) /* "" AMD BTB untrain return */</div><div class='add'>+#define X86_FEATURE_RSB_VMEXIT_LITE	(11*32+17) /* "" Fill RSB on VM-Exit when EIBRS is enabled */</div><div class='ctx'> </div><div class='ctx'> /* Intel-defined CPU features, CPUID level 0x00000007:1 (EAX), word 12 */</div><div class='ctx'> #define X86_FEATURE_AVX_VNNI		(12*32+ 4) /* AVX VNNI instructions */</div><div class='head'>diff --git a/tools/arch/x86/include/asm/msr-index.h b/tools/arch/x86/include/asm/msr-index.h<br/>index ec2967e7249f5..8f38265bc81dc 100644<br/>--- a/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/arch/x86/include/asm/msr-index.h?id=c81d1bb58c88ab831e02539a26ad47860e8d6f0c'>tools/arch/x86/include/asm/msr-index.h</a><br/>+++ b/<a href='/pub/scm/linux/kernel/git/torvalds/linux.git/tree/tools/arch/x86/include/asm/msr-index.h?id=7fcd99e889c0634f8275ae7a6b06aec4a22c8715'>tools/arch/x86/include/asm/msr-index.h</a></div><div class='hunk'>@@ -148,6 +148,10 @@</div><div class='ctx'> 						 * are restricted to targets in</div><div class='ctx'> 						 * kernel.</div><div class='ctx'> 						 */</div><div class='add'>+#define ARCH_CAP_PBRSB_NO		BIT(24)	/*</div><div class='add'>+						 * Not susceptible to Post-Barrier</div><div class='add'>+						 * Return Stack Buffer Predictions.</div><div class='add'>+						 */</div><div class='ctx'> </div><div class='ctx'> #define MSR_IA32_FLUSH_CMD		0x0000010b</div><div class='ctx'> #define L1D_FLUSH			BIT(0)	/*</div></td></tr></table></div> <!-- class=content -->
<div class='footer'>generated by <a href='https://git.zx2c4.com/cgit/about/'>cgit </a> (<a href='https://git-scm.com/'>git 2.34.1</a>) at 2023-02-02 23:01:09 +0000</div>
</div> <!-- id=cgit -->
</body>
</html>
